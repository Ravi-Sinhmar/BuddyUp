
<style>

  #sentSection.visible{
    transform: translateX(0);
  }
  #receivedSection.hide{
    transform: translateX(-120%);
  }
</style>
<main style="z-index: 1;" id="wrapper" class=" bg-blm rounded-xl h-svh top-0 bottom-0 left-0 right-0  flex flex-col justify-between items-center ">
  <nav class="px-6 py-5 space-y-4  w-full  z-10 shadow-sm shadow-blb">
    <div class="flex justify-between items-center">
      <h1 class="font-[500] text-black text-xl" >Requests</h1>
     
    </div>
        <div class="flex justify-center items-start h-8">
          <div class="w-1/2 flex flex-col  items-center justify-start h-full">
              <button id="received" class="h-full px-6 text-black ">Received</button>
              <div id="receivedUnderline" class="w-full  bg-blh h-1 rounded-full"></div>
          </div>
          <div class="w-1/2 flex flex-col  items-center justify-start h-full">
              <button id="sent" class="h-full px-6 ">Sent</button>
              <div id="sentUnderline" class="w-full   h-1 rounded-full"></div>

          </div>
      </div>
  </nav>
        
  
   

          <!-- List of people with whom  user doing chat -->
           <div id="receivedSection" class="transition-transform duration-500 ease-in-out bg-blm flex flex-col space-y-3 px-4 fixed top-32 bottom-24 py-2 left-0 right-0 overflow-y-scroll">
           
              <div id="recCustom" class="<%= rCustom %>  flex h-full w-full flex-col justify-center items-center ">
                <div class="flex flex-col justify-center items-center mb-20 ">
                 <img src="/bg/requests.png"  alt="" class="w-32 h-32">
                 <h1 class="font-[600] text-xl">No received requests!</h1>
                 <h1 class="text-blt ">Your don't have any received request</h1>
                </div>
               </div>
     <div class="flex flex-col w-full h-full <%= rSection %>">
      <% friendData.forEach(friend => {  %>
        <% if (friend.state === "received") { %>
<div  id="<%= friend.chatId %>" class="requestId rec bg-blh border border-blb rounded-xl  flex justify-between items-center px-4 py-4 relative ">
  <div class="flex justify-center gap-2">
    <img
      class="profilePic w-12 h-12 rounded-full"
      src="/img/<%= friend.profilePic %>"
      alt=""
    />
    <div class="flex flex-col items-start justify-center gap-0.5">
      <h1 class="name  text-sm text-black "><%= friend.name %></h1>
      <!-- <p class="  text-blf  text-xs ">View Profile</p> -->
    </div>
  </div>
  <div class="flex justify-center items-center gap-4">
    <button id="Accept" class="accept px-2 py-1.5 bg-blm rounded-md border border-blb text-blf text-sm " >Accept</button>
    <button id="Delete" class=" delete px-2 py-1.5 bg-red-600 rounded-md border border-blb  text-blm text-sm" >Delete</button>
    
  </div>

 
</div>
<% } %>


<% }) %>
     </div>
  </div>
  


           <!-- ----------------------sent section  -->

            
            <div id="sentSection" class=" translate-x-[120%] transition-transform duration-500 ease-in-out bg-blm flex flex-col space-y-3 px-4 fixed top-32 bottom-24 py-2 left-0 right-0 overflow-y-scroll">
            <div id="senCustom" class=" <%= sCustom %> flex h-full w-full flex-col justify-center items-center ">
              <div class="flex flex-col justify-center items-center mb-20 ">
               <img src="/bg/requests.png"  alt="" class="w-32 h-32">
               <h1 class="font-[600] text-xl">No sent requests!</h1>
               <h1 class="text-blt ">Your haven't sent any request yet! </h1>
              </div>
             </div>
<div class="flex flex-col  w-full h-full <%= sSection %>">
  <% friendData.forEach(friend => {  %>     
    <% if (friend.state === "sent") { %>
  <div  id="<%= friend.chatId %>"  class="requestId sen bg-blh border border-blb rounded-xl  flex justify-between items-center px-4 py-4 relative ">
    <div class="flex justify-center gap-2">
      <img
        class="profilePic w-12 h-12 rounded-full"
        src="/img/<%= friend.profilePic %>"
        alt=""
      />
      <div class="flex flex-col items-start justify-center gap-0.5">
        <h1 class="name  text-sm text-black "><%= friend.name %></h1>
        <!-- <p class="  text-blf  text-xs ">View Profile</p> -->
      </div>
    </div>
    <div class="flex justify-center items-center gap-4">
      <button  class=" remove px-2 py-1.5 bg-red-600 rounded-md border border-blb  text-blm text-sm" >Remove</button>
      
    </div>


 </div>

 <% } %>
<% })  %>
</div>
            

                 </div>
              
               
                 
         

 <!-- Plus Anything, aboslute with above div  -->
</main>
<%- include('./partials/footer.ejs') %>
<%- include('./partials/warningBox.ejs') %>



<script>

  
  const acceptReq = document.querySelectorAll('.accept');
  const deleteReq = document.querySelectorAll('.delete');
  const removeReq = document.querySelectorAll('.remove');
  const sent = document.getElementById('sent');
  const received = document.getElementById('received');
  const receivedUnderline = document.getElementById('receivedUnderline');
  const sentUnderline = document.getElementById('sentUnderline');
  const sentSection = document.getElementById('sentSection');
  const receivedSection = document.getElementById('receivedSection');
  





received.addEventListener('click',(event)=>{
sentUnderline.classList.remove('bg-blh')
receivedUnderline.classList.add('bg-blh')
receivedSection.classList.remove('hide');
sentSection.classList.remove('visible');
});
sent.addEventListener('click',(event)=>{
receivedUnderline.classList.remove('bg-blh')
sentUnderline.classList.add('bg-blh')
sentSection.classList.add('visible');
receivedSection.classList.add('hide');

});

acceptReq.forEach(element => {
    element.addEventListener('click', (event) => {
      event.preventDefault(); // Prevent default form submission
     

      if (event.target.closest('.requestId')) {

        // getting parent div
        const requestDiv = event.target.closest('.requestId');

        // getting  uid 
        const rid = requestDiv.getAttribute('id');
        

        // Assuming you have the data to send in a variable named 'content'
      

        fetch(`/requests/accept/${rid}`, {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json; charset=UTF-8',
              'Accept': 'application/json'
            },
           
          }).then((data) => {
           
            return data.json();
          }).then((jsonData) => {

            if (jsonData.status === "success") {
              successBox("Accepted","You have accept the request","/messages")
              
            }
          })
          .catch(err => {
            fail("Some Issue,Try again","We encountered some issue in accepting the request","/requests")
            
          });


      }
    })

  });


  deleteReq.forEach(element => {
    element.addEventListener('click', (event) => {
      event.preventDefault(); // Prevent default form submission

      if (event.target.closest('.requestId')) {

        // getting parent div
        const requestDiv = event.target.closest('.requestId');

        // getting  uid 
        const rid = requestDiv.getAttribute('id');
        // Assuming you have the data to send in a variable named 'content'
      

        fetch(`/requests/delete/${rid}`, {

            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json; charset=UTF-8',
              'Accept': 'application/json'
            },
           
          }).then((data) => {
            
            return data.json();
          }).then((jsonData) => {

            if (jsonData.status === "success") {
              successBox("Deleted","You have deleted the request","/requests")
              
            }
          })
          .catch(err => {
            fail("Some Issue,Try again","We encountered some issue in deleting the request","/requests")
            
          });


      }
    })

  });


  removeReq.forEach(element => {
    element.addEventListener('click', (event) => {
      event.preventDefault(); // Prevent default form submission

      if (event.target.closest('.requestId')) {

        // getting parent div
        const requestDiv = event.target.closest('.requestId');

        // getting  uid 
        const rid = requestDiv.getAttribute('id');
        // Assuming you have the data to send in a variable named 'content'
      
        fetch(`/requests/remove/${rid}`, {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json; charset=UTF-8',
              'Accept': 'application/json'
            },
           
          }).then((data) => {
            
            return data.json();
          }).then((jsonData) => {

            if (jsonData.status === "success") {
              successBox("Removed Successfully","You have remove your request","/requests")
              
            }
          })
          .catch(err => {
            fail("Some Issue,Try again","We encountered some issue in removing your request","/requests")
           
          });
      }
    })

  });



// Go On Profile......
const requestIdBtn = document.querySelectorAll('.requestId');
requestIdBtn.forEach(btn =>{
btn.addEventListener('click', (event)=>{
  // to avoid recognzaton of click on childs
  if (event.target.closest('.requestId') && event.target !=acceptReq && event.target != deleteReq && event.target != removeReq ) {
  
// getting parent div
const requestDiv = event.target.closest('.requestId');

// getting person name 
const userNameElement = requestDiv.querySelector('.name');

const name = userNameElement.textContent.trim();
// getting image name 
const profilePic = requestDiv.querySelector('.profilePic');
let profilePicSrc = profilePic.src;

profilePicSrc = profilePicSrc.split('/');
const imageName = profilePicSrc[profilePicSrc.length - 1];

}

})

})

</script>
