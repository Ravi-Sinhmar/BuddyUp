<section id="tops" class="top-0 left-0 right-0 bottom-0 fixed px-7 bg-blh">
  <!-- Top  -->

  <header  class="flex justify-between items-center rounded-xl overflow-hidden fixed top-3 left-3 right-3 h-16 px-2 z-10 bg-blm">
    <div class="flex items-center gap-2">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5 3 12m0 0 7.5-7.5M3 12h18" />
      </svg>


      <img id="fprofilePic" class="profilePic w-12 h-12 rounded-full" src="" alt="" />
      <div>
        <h1 id="fname" class="name text-sm text-black font-semibold">Dummy</h1>
        <div class="flex items-center justify-start gap-1">
          <div class="h-2 w-2 bg-blf rounded-full"></div>
          <p class="text-xs">Active</p>
        </div>
      </div>
    </div>

    <div id="navBtn" class="cursor-pointer">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-black more">
        <path stroke-linecap="round" stroke-linejoin="round" d="M12 6.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 12.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 18.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5Z" />
      </svg>
    </div>
  </header>

  <!-- Mid  -->
  <section id="chatSection" class="overflow-y-scroll bg-blh fixed top-16 py-8 px-2 bottom-20 left-0 right-0">
    <% message.forEach(message => { %>



    <% if (message.sid === userId) { %>
    <div uid="<%= message._id %>" rid="<%= message.chatId %>" sid="<%= userId %>" id="sMsg" class="px-2 py-1 flex items-center justify-end gap-1">
      <h1 class="text-xs bg-white px-3 py-2 shadow-black shadow-sm break-words rounded-2xl rounded-br-sm max-w-10/12">
        <%= message.content %>
      </h1>

    </div>
    <% } %>



    <% if (message.sid != userId && message.fid === userId) { %>
    <div uid="<%= message._id %>" rid="<%= message.chatId %>" sid="<%= message.fid %>" id="rMsg" class="px-2 py-1 flex justify-start gap-1">
      <h1 class="text-xs bg-white px-3 py-2 shadow-black shadow-sm break-words rounded-2xl rounded-bl-sm max-w-10/12">
        <%= message.content %>
      </h1>

    </div>
    <% } %>

    <% }) %>



  </section>

  <!-- Bottom  -->

  <footer id="extraInfo" tid="<%= tid %>" rname="<%= message.rname %>"  rid="<%= chatId %>" sname="<%= userName %>" sid="<%= userId %>" class="flex justify-between px-2 items-center fixed z-30 bottom-3 left-3 right-3 py-2 rounded-xl bg-blm border overflow-hidden border-blb">
    <textarea id="sendMsg" name="" placeholder="Thingking..." id="" rows="2" style="outline: none; border: none; white-space: break-spaces" class="outline-none text-decoration-none bg-blm px-2 py-1 text-blt w-10/12"></textarea>
    <div class="flex justify-between items-center gap-6">
      <div class="h-6 w-[2px] bg-blf rounded-full"></div>
      <svg id="sendBtn" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-14 h-14 text-blf rounded-md p-3">
        <path stroke-linecap="round" stroke-linejoin="round" d="M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5" />
      </svg>
    </div>
  </footer>
</section>

<%- include('blurBox.ejs') %>
<%- include('navChat.ejs') %>
<%- include('loader') %>


<script src="/js/localStorage.js"></script>
<script>
const friendName =  document.getElementById('fname');
const friendPic =  document.getElementById('fprofilePic');

const localData = getLocalData();
console.log(localData);

friendName.innerHTML = localData.name;
friendPic.src = `/img/${localData.profilePic}`;



  function autoReload() {
    setTimeout(function() {
      // window.location.reload();
    }, 3000);
  }

  // Call the function to start automatic reloading
  // autoReload();
</script>

<script>
  const sendInput = document.getElementById("sendMsg"); // Get the input element
  const chatSection = document.getElementById("chatSection"); // Get the chat section
  const sendButton = document.getElementById("sendBtn"); // Get the send button (image)
  const extraInfo = document.getElementById("extraInfo");

  const rid = extraInfo.getAttribute("rid");
  const rname = extraInfo.getAttribute("rname");
  const sid = extraInfo.getAttribute("sid");
  const sname = extraInfo.getAttribute("sname");
  const tid = extraInfo.getAttribute("tid");
 

  // Websocket code
  // Send MSG to Socket

    // const socket = new WebSocket(`ws://localhost:8080?tid=${tid}`);
    const socket = new WebSocket(`wss://msg-io.onrender.com/?tid=${tid}`);

    socket.addEventListener('connect',(event)=>{
      socket.send("hi this is client");
    })
    // const socket = new WebSocket(`wss://localhost:8080?tid=${tid}`);
  

  function sendSocket() {
    let messageContent = {
      content: sendInput.value.trim(),
      rid: rid,
      rname:rname,
      sid: sid,
      sname:sname,

    };
    messageContent = JSON.stringify(messageContent);
    socket.send(messageContent);
  }

  sendInput.addEventListener("focus", () => {
    // alert(chatSection.offsetTop);
    // alert(main.offsetTop);
    // alert(nav.offsetTop);
    // alert(tops.offsetTop);
    // alert(extraInfo.offsetTop);
  });

  // Function to create and add a new message
  function appendMsg(side, radius, messageData) {
    const message = messageData;
    if (message) {
      const newMessageDiv = document.createElement("div");
      newMessageDiv.id = "sMsg";
      newMessageDiv.classList.add("w-full");

      const messageContentDiv = document.createElement("div");
      messageContentDiv.classList.add(
        "px-2",
        "py-1",
        "flex",
        `${side}`,
        "gap-1"
      );

      const messageText = document.createElement("h1");
      messageText.textContent = message;
      messageText.classList.add(
        "text-xs",
        "bg-white",
        "px-3",
        "py-2",
        "shadow-black",
        "shadow-sm",
        "break-words",
        "rounded-2xl",
        `${radius}`,
        "max-w-64"
      );

      messageContentDiv.appendChild(messageText);
      newMessageDiv.appendChild(messageContentDiv);
      chatSection.appendChild(newMessageDiv);
      sendInput.value = ""; // Clear the input field
    }
  }

  // scroll to bootom on send or receive the message
  function scrollToSet() {
    chatSection.scrollTop = chatSection.scrollHeight; // Scroll to bottom
  }
  if (chatSection.scrollHeight > 500) {
    scrollToSet();
  }

  // ----------------------------------------------Receiving Data---------------------------------------------

  // Recive MSG from Socket
  function receiveSocket(data) {
    const content = data.content;
    const senderId = data.senderId;
  
   

    return;
  }

  socket.addEventListener("message", function(event) {
    const data = JSON.parse(event.data);
    receiveSocket(data);
    const messageData = data.content;
    appendMsg("justify-start", "rounded-bl-sm", messageData);
    scrollToSet();
  });

  // -------------------------------------- Sending Data ------------------------------------------------
  // Event listener for Enter key press
  sendInput.addEventListener("keyup", (event) => {
    if (event.keyCode === 13 && sendInput.offsetWidth > 340) {
      event.preventDefault();
      sendSocket();
      const messageData = sendInput.value.trim(); // Get the trimmed message value
      appendMsg("justify-end", "rounded-br-sm", messageData);
      if (chatSection.scrollHeight > 600) {
        scrollToSet();
      }
      sendInput.focus();
    }
  });

  // Event listener for clicking the send button (image)
  sendButton.addEventListener("click", (event) => {
    sendSocket();
    const messageData = sendInput.value.trim(); // Get the trimmed message value
    appendMsg("justify-end", "rounded-br-sm", messageData);
    if (chatSection.scrollHeight > 600) {
      scrollToSet();
    }
    sendInput.focus();
  });
</script>