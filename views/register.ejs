<main class="h-svh flex flex-col justify-between bg-blm pb-8">
  <nav class="flex justify-between items-center h-16 w-full px-4 py-4 border-blb text-blm bg-blf">
    <div class="flex items-center gap-5">
      <a href="/login">
        <svg id="back" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5">
          <path fill-rule="evenodd" d="M7.72 12.53a.75.75 0 0 1 0-1.06l7.5-7.5a.75.75 0 1 1 1.06 1.06L9.31 12l6.97 6.97a.75.75 0 1 1-1.06 1.06l-7.5-7.5Z" clip-rule="evenodd" />
        </svg>
      </a>
      <h1 id="sp" class="font-[500] text-xl">Sign up</h1>
    </div>
  </nav>

  <div class="flex flex-col px-4 py-4 gap-1">
    <h1 class="font-[500]">Create your account</h1>
    <p class="text-xs text-blt">
      We are not asking for bank details, so just make a brand new account
    </p>
  </div>

  <form action="/register" method="post" class="flex flex-col justify-between w-full h-full text-sm gap-2 px-4 py-4">
    <div class="flex flex-col gap-4">
      <div class="flex flex-col">
        <label for="name">Your name</label>
        <input name="name" type="text" required placeholder="Enter your name" class="bg-transparent text-blt px-3 py-3 outline-none border border-blt rounded-lg" />
      </div>
      <div class="flex flex-col ">
        <label class="flex flex-col items-start w-full justify-between" for="_id">Username <span id="alertMsg" class="text-[10px]  text-blf"> Allowed Chars: { lowercase } , { _ } , { . } , { numbers } </span> </label> 
       <div class="relative flex w-full ">
        <input id="username" name="_id" type="text" required placeholder="Enter Username" class="bg-transparent w-full text-blt px-3 py-3 outline-none border border-blt rounded-lg" />
        <svg id="valid" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-7 text-blf absolute right-2 top-1/2 -translate-y-1/2 hidden">
          <path fill-rule="evenodd" d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12Zm13.36-1.814a.75.75 0 1 0-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 0 0-1.06 1.06l2.25 2.25a.75.75 0 0 0 1.14-.094l3.75-5.25Z" clip-rule="evenodd" />
        </svg>
        <svg id="invalid" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-7 text-ble absolute right-2 top-1/2 -translate-y-1/2 hidden">
          <path fill-rule="evenodd" d="M12 2.25c-5.385 0-9.75 4.365-9.75 9.75s4.365 9.75 9.75 9.75 9.75-4.365 9.75-9.75S17.385 2.25 12 2.25Zm-1.72 6.97a.75.75 0 1 0-1.06 1.06L10.94 12l-1.72 1.72a.75.75 0 1 0 1.06 1.06L12 13.06l1.72 1.72a.75.75 0 1 0 1.06-1.06L13.06 12l1.72-1.72a.75.75 0 1 0-1.06-1.06L12 10.94l-1.72-1.72Z" clip-rule="evenodd" />
        </svg>
       </div>
       
      </div>

      <div class="flex flex-col">
        <label for="name">Set password</label>
        <input name="password" type="password" required placeholder="Set a strong password" class="bg-transparent text-blt px-3 py-3 outline-none border border-blt rounded-lg" />
      </div>
    </div>
    <button type="submit" id="signUp" class="bg-blf bg-blb text-blm text-lg font-[500] rounded-md py-3">
      Sign up
    </button>
  </form>

  <p class="text-black text-sm text-start ps-6">
    Already have account
    <a id="login" href="/login" class="font-[700] px-2 text-blf underline">Login</a>
  </p>
</main>
<script>
  const usernameInput = document.getElementById("username");
  const valid = document.getElementById("valid");
  const invalid = document.getElementById("invalid");
  const signUp = document.getElementById("signUp");
  const alertMsg = document.getElementById("alertMsg");
  const fail = () => {
    signUp.disabled = true;
    if(!alertMsg.classList.contains('text-ble')){
          alertMsg.classList.add('text-ble');
          alertMsg.classList.remove('text-blf');
        }
        else{
          alertMsg.classList.remove('text-blf');
        }
    if (signUp.classList.contains('bg-blf')) {
      signUp.classList.remove("bg-blf");
      if (!signUp.classList.contains('bg-blb')) {
        signUp.classList.add("bg-blb");
      }
    } else {
      if (!signUp.classList.contains('bg-blb')) {
        signUp.classList.add("bg-blb");
      }
    };

    if (!valid.classList.contains('hidden')) {
      valid.classList.add('hidden');
      if (invalid.classList.contains('hidden')) {
        invalid.classList.remove('hidden');
      }
    } else {
      if (invalid.classList.contains('hidden')) {
        invalid.classList.remove('hidden');
      }
    }
  }

  const success = () => {
    signUp.disabled = false;
    if(!alertMsg.classList.contains('text-blf')){
          alertMsg.classList.add('text-blf');
        }
        else{
          alertMsg.classList.remove('text-ble');
        }

        alertMsg.innerText = "Allowed Chars: { _ } , { . } , { lowercase } , { numbers }"
    if (signUp.classList.contains('bg-blb')) {
      signUp.classList.remove("bg-blb");
      if (!signUp.classList.contains('bg-blf')) {
        signUp.classList.add("bg-blf");
      }
    } else {
      if (!signUp.classList.contains('bg-blf')) {
        signUp.classList.add("bg-blf");
      }
    };


    if (!invalid.classList.contains('hidden')) {
      invalid.classList.add('hidden');
      if (valid.classList.contains('hidden')) {
        valid.classList.remove('hidden');
      }
    } else {
      if (valid.classList.contains('hidden')) {
        valid.classList.remove('hidden');
      }
    }
  }


  usernameInput.addEventListener("input", async () => {
    const inputValue = usernameInput.value;
    const isValid = inputValue.length > 0 && inputValue.trim() !== "";
    signUp.disabled = !isValid;
    const allowedCharacters = /^[a-z][a-z0-9._]*$/;

    if (!isValid) {
      fail();
    } else if ((isValid && !allowedCharacters.test(inputValue)) || (isValid && inputValue.length > 20)) {
      if (inputValue.length > 20) {
        alertMsg.innerText = "Length exceeds to 20"
        
        event.target.value = inputValue.slice(0, 20);
      }

      fail();

    } else if ((isValid && allowedCharacters.test(inputValue)) && (isValid && inputValue.length <= 20)) {
      success();
      const response = await fetch(`/check?username=${inputValue}`);
      const data = await response.json();
      if (data.status === "success") {
        success();
      } else {
        alertMsg.innerText = "Username already taken"
        fail();
      }
    }

  });
</script>