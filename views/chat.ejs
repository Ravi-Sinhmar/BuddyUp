<section id="tops" class="top-0 left-0 right-0 bottom-0 h-svh  w-full px-7 bg-blh">
  <!-- Top  -->

  <header  id="fhead" toId="<%= toId %>" class="cursor-pointer flex justify-between items-center rounded-xl overflow-hidden fixed top-3 left-3 right-3 h-16 px-2 z-10 bg-blm">
    <div class="flex items-center gap-2">
  <a id="back" href="/messages">
    <svg id="backIcon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
      <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5 3 12m0 0 7.5-7.5M3 12h18" />
    </svg>
  </a>

      <img id="fprofilePic" class="profilePic w-12 h-12 rounded-full" src="" alt="" />
      <div>
        <h1 id="fname" class="name text-sm text-black font-semibold">Dummy</h1>
        <div class="flex items-center justify-start gap-1">
          <div style="background: #676B73;" id="dot" class="h-2 w-2  rounded-full"></div>
          <p id="state" class="text-xs">Offline</p>
        </div>
      </div>
    </div>

    <div id="navBtn" class="cursor-pointer  h-full w-10 flex justify-center items-center text-center">
      <svg id="navIcon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-black more">
        <path stroke-linecap="round" stroke-linejoin="round" d="M12 6.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 12.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 18.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5Z" />
      </svg>
    </div>
  </header>


 
      <!-- <div id="tempMsg" class=" flex-col flex justify-center items-center w-full h-full ">
        <h1 class="font-[600] text-lg z-10 ">Start Chat Now!</h1>
        <p class=" text-blt font-[500] z-10 text-sm">Say them hi, everyone has one life...</p>
       </div>
       -->

  <!-- Mid  -->
 
  <section id="chatSection" class="overflow-y-scroll bg-blh fixed top-16 py-8 px-2 bottom-20 left-0 right-0">
    <% if (message.length > 0) { %>
    <% message.forEach(message => { %>
    <% if (message.sid === userId) { %>
    <div uid="<%= message._id %>" rid="<%= message.chatId %>" sid="<%= userId %>" id="sMsg" class="px-2 py-1 flex flex-col items-end justify-end gap-1">
      <h1 class="text-xs bg-white px-3 py-2 shadow-black shadow-sm break-words rounded-2xl rounded-br-sm max-w-10/12">
        <%= message.content %>
      </h1>
      <span class="text-[8px]">2 days ago</span>
    </div>
    <% } %>

    <% if (message.sid != userId && message.fid === userId) { %>
    <div uid="<%= message._id %>" rid="<%= message.chatId %>" sid="<%= message.fid %>" id="rMsg" class="px-2 py-1 flex flex-col items-start justify-start gap-1">
      <h1 class="text-xs bg-white px-3 py-2 shadow-black shadow-sm break-words rounded-2xl rounded-bl-sm max-w-10/12">
        <%= message.content %>
      </h1>
      <span class="text-[8px]">2 days ago</span>
    </div>
    <% } %>

    <% }) %>


    <% } %>
  </section>
 

  <!-- Bottom  -->

  <footer id="extraInfo" tid="<%= tid %>" rname="<%= message.rname %>"  rid="<%= chatId %>" sname="<%= userName %>" sid="<%= userId %>" class="flex justify-between px-2 items-center fixed z-30 bottom-3 left-3 right-3 py-2 rounded-xl bg-blm border overflow-hidden border-blb">
    <textarea id="sendMsg" name="" placeholder="Thingking..." id="" rows="2" style="outline: none; border: none; white-space: break-spaces" class="outline-none text-decoration-none bg-blm px-2 py-1 text-blt w-10/12"></textarea>
    <div class="flex justify-between items-center gap-6">

      <svg id="sendBtn" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-12  text-blf rounded-md px-2 py-3">
        <path stroke-linecap="round" stroke-linejoin="round" d="M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5" />
      </svg>
    </div>
  </footer>
</section>

<%- include('./partials/blurBox.ejs') %>
<%- include('./partials/loader') %>
<%- include('./partials/navChat.ejs') %>
<%- include('./partials/warningBox.ejs') %>



<script src="/js/localStorage.js"></script>
<script>
const friendName =  document.getElementById('fname');
const friendPic =  document.getElementById('fprofilePic');
const tempMsg = document.getElementById('tempMsg');
const fhead = document.getElementById('fhead');
const back = document.getElementById('back');
const backIcon = document.getElementById('backIcon');
const dot = document.getElementById('dot');
const state = document.getElementById('state');


// block user click 
block.addEventListener('click',(event)=>{
let toId = block.getAttribute('toId');
blockUserFun(toId);
});



fhead.addEventListener('click',(event)=>{
if(event.target != navBtn && event.target != back && event.target != backIcon && event.target != navIcon){
let href = fhead.getAttribute('toId');
window.location.href = `/users/${href}`;
}});

const localData = getLocalData();
console.log(localData);


friendName.innerHTML = localData.name;
friendPic.src = `/img/${localData.profilePic}`;
 
  const sendInput = document.getElementById("sendMsg"); // Get the input element
  const chatSection = document.getElementById("chatSection"); // Get the chat section
  const sendButton = document.getElementById("sendBtn"); // Get the send button (image)
  const extraInfo = document.getElementById("extraInfo");
  let rid = extraInfo.getAttribute("rid");
  if(rid === ''){
    rid  = localData.rid;
  }
  let rname = extraInfo.getAttribute("rname");
  if(rname === ''){
    rname = localData.name;
  }
  const sid = extraInfo.getAttribute("sid");
  const sname = extraInfo.getAttribute("sname");
  const tid = extraInfo.getAttribute("tid");
  // Websocket code
  // Send MSG to Socket
    // const socket = new WebSocket(`ws://localhost:3000/?tid=${tid}&rid=${rid}`);
    
    const socket = new WebSocket(`wss://msg-io.onrender.com/?tid=${tid}&rid=${rid}`);
  


  function sendSocket() {
    let messageContent = {
      content: sendInput.value.trim(),
      rid: rid,
      rname:rname,
      sid: sid,
      sname:sname,
    };
    messageContent = JSON.stringify(messageContent);
    socket.send(messageContent);
  }


  // Function to create and add a new message
  function appendMsg(side, radius, messageData) {
    const message = messageData;
    if (message) {
      const newMessageDiv = document.createElement("div");
      newMessageDiv.id = "sMsg";
      newMessageDiv.classList.add("w-full");

      const messageContentDiv = document.createElement("div");
      messageContentDiv.classList.add(
        "px-2",
        "py-1",
        "flex",
        "flex-col",
        `${side}`,
        "gap-1"
      );
      const timeDiv = document.createElement("span");
      timeDiv.textContent = new Date().toLocaleTimeString();
      timeDiv.classList.add(
        "text-[8px]"
      )

      const messageText = document.createElement("h1");
      messageText.textContent = message;
      messageText.classList.add(
        "text-xs",
        "bg-white",
        "px-3",
        "py-2",
        "shadow-black",
        "shadow-sm",
        "break-words",
        "rounded-2xl",
        `${radius}`,
        "max-w-64"
      );

      messageContentDiv.appendChild(messageText);
      messageContentDiv.appendChild(timeDiv);
      newMessageDiv.appendChild(messageContentDiv);
      chatSection.appendChild(newMessageDiv);
      sendInput.value = ""; // Clear the input field
    }
  }

  // scroll to bootom on send or receive the message
  function scrollToSet() {
    chatSection.scrollTop = chatSection.scrollHeight; // Scroll to bottom
  }
  if (chatSection.scrollHeight > 500) {
    scrollToSet();
  }

  // ----------------------------------------------Receiving Data---------------------------------------------

  // Recive MSG from Socket
  function receiveSocket(data) {
    const content = data.content;
    const senderId = data.senderId;
  
   

    return;
  }



  


  socket.addEventListener("message", function(event) {
    const data = JSON.parse(event.data);

    if(rid === `${data.id}-${sid}` || rid === `${sid}-${data.id}` ){
   if(data.state === 'Online'){
   
    state.innerText = 'Online';
    dot.style.background = "#4E61EA";
    state.style.color = "#4E61EA";
   }
  
if(data.state === 'Offline'){
 
  state.innerText = 'Offline';
    dot.style.background = "#676B73";
}
  }  
  else{
    state.innerText = 'Offline';
    dot.style.background = "#676B73";
  }


    
    
if(data.onlineOnly){
  console.log("List come",data.onlineOnly);
data.onlineOnly.forEach(el => {
  if(rid === `${el}-${sid}` || rid === `${sid}-${el}`){
  
    state.innerText = 'Online';
    dot.style.background = "#4E61EA";
    state.style.color = "#4E61EA";
  }
  else{
   
    state.innerText = 'Offline';
    dot.style.background = "#676B73";
  }
}); 
}
  
    receiveSocket(data);
    const messageData = data.content;
    appendMsg("items-start", "rounded-bl-sm", messageData);
    scrollToSet();
 
  });

  // -------------------------------------- Sending Data ------------------------------------------------
  // Event listener for Enter key press
  sendInput.addEventListener("keyup", (event) => {
    if (event.keyCode === 13 && sendInput.offsetWidth > 340) {
      event.preventDefault();
      sendSocket();
      const messageData = sendInput.value.trim(); // Get the trimmed message value
      appendMsg("items-end", "rounded-br-sm", messageData);
      if (chatSection.scrollHeight > 600) {
        scrollToSet();
      }
      sendInput.focus();
    }
  });

  // Event listener for clicking the send button (image)
  sendButton.addEventListener("click", (event) => {
    sendSocket();
    const messageData = sendInput.value.trim(); // Get the trimmed message value
    appendMsg("items-end", "rounded-br-sm", messageData);
    if (chatSection.scrollHeight > 600) {
      scrollToSet();
    }
    sendInput.focus();
   
  });
</script>